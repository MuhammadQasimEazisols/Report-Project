@model IEnumerable<Reports.ViewModel.AllReportDetailsViewModel>
@{
    ViewData["Title"] = "All Report Details";
}

<form method="get" asp-action="SearchReport" asp-controller="Report" class="bg-light p-4 rounded shadow-sm">
    <div class="row g-3">
        <div class="col-md-4">
            <div class="form-floating">
                <input type="text" class="form-control border-0 shadow-sm" id="search" placeholder="Search by keyword..."
                name="searchKey" value="@Context.Request.Query["searchKey"]" />
                <label for="search" class="text-muted">Search by keyword...</label>
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-floating">
                <select class="form-select border-0 shadow-sm" id="selectedUser" name="selectedUser" onchange="SelectedElement(this)">
                    <option value="">-- All Users --</option>
                    @foreach (var user in ViewBag.Users)
                    {
                        <option value="@user.UserId" selected="@(ViewBag.SelectedUser == user.UserId)">
                            @user.UserName
                        </option>
                    }
                </select>
                <label for="selectedUser" class="text-muted">Select User</label>
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-floating">
                <select class="form-select border-0 shadow-sm" id="selectedReport" name="selectedReport">
                    <option value="">-- All Reports --</option>
                </select>
                <label for="selectedReport" class="text-muted">Select Report</label>
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-floating">
                <select class="form-select border-0 shadow-sm" id="pageSize" name="pageSize" onsubmit="">
                    @{
                        int selectedSize = ViewBag.CurrentSelectedSize ?? 10;
                        int[] sizes = new[] { 5, 10, 20, 50, 100 };
                    }
                    @foreach (var size in sizes)
                    {
                        <option value="@size" selected="@(size == selectedSize)">@size</option>
                    }
                </select>
                <label for="pageSize" class="text-muted">Page Size</label>
            </div>
        </div>

        <div class="col-md-2 d-flex align-items-center">
            <button type="submit" class="btn btn-primary w-100 py-3 shadow-sm">
                <i class="bi bi-search me-2"></i>Search
            </button>
        </div>
    </div>

    <div class="container mt-4">
        <div class="card">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h3 class="mb-0">All Report Details</h3>
                <a asp-controller="Home" asp-action="Index" class="btn btn-light">Back to Home</a>
            </div>
            <div class="card-body">
                @if (!Model.Any())
                {
                    <div class="alert alert-info">
                        No Data found.
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>TrackingNumber</th>
                                    <th>DeliveryStatus</th>
                                    <th>CarrierName</th>
                                    <th>ShippingAdress</th>
                                    <th>Price</th>
                                    <th>Report Name</th>
                                    <th>Uploaded By</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var report in Model)
                                {
                                    <tr>
                                        <td>@report.TrackingNumber</td>
                                        <td>@report.DeliveryStatus</td>
                                        <td>@report.CarrierName</td>
                                        <td>@report.ShippingAdress</td>
                                        <td>@report.Price</td>
                                        <td>@report.ReportName</td>
                                        <td>@report.UserName</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
    @if (ViewBag.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-4">

                <li class="page-item @(ViewBag.CurrentPage <= 1 ? "disabled" : "")">
                    <button type="button" onclick="fetchPageData(@(ViewBag.CurrentPage - 1))"  class="page-link">&laquo;</button>
                </li>

                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    <li class="page-item @(ViewBag.CurrentPage == i ? "active" : "")">
                        <button type="button" onclick="fetchPageData(@i)" class="page-link">@i</button>
                    </li>
                }

                <li class="page-item @(ViewBag.CurrentPage >= ViewBag.TotalPages ? "disabled" : "")">
                    <button type="button" onclick="fetchPageData(@(ViewBag.CurrentPage + 1))" class="page-link">&raquo;</button>
                </li>

            </ul>
        </nav>
    }

</form>



<script>
    function SelectedElement(selectElement) {
        var selectedUser = selectElement.value;
        var reportSelect = document.getElementById('selectedReport');

        reportSelect.innerHTML = '<option value="">-- All Reports --</option>';

        if (!selectedUser) return;

        fetch('/Report/GetReportsForUser?UserId=' + encodeURIComponent(selectedUser))
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                data.forEach(report => {
                    var option = document.createElement('option');
                    option.value = report.reportId;
                    option.text = report.name;
                    reportSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error fetching reports:', error);
            });
    }

    async function fetchPageData(pageNumber) {
        const searchKey = document.getElementById('search').value;
        const selectedUser = document.getElementById('selectedUser').value;
        const selectedReport = document.getElementById('selectedReport').value;
        const pageSize = document.getElementById('pageSize').value;


        const params = new URLSearchParams();
        if (searchKey) params.append('searchKey', searchKey);
        if (selectedUser) params.append('selectedUser', selectedUser);
        if (selectedReport) params.append('selectedReport', selectedReport);
        if (pageSize) params.append('pageSize', pageSize);
        params.append('pageNumber', pageNumber);

        const url = `/Report/SearchReport?${params.toString()}`;

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const htmlContent = await response.text();

            const parser = new DOMParser();
            const doc = parser.parseFromString(htmlContent, 'text/html');

            const newTableBody = doc.querySelector('tbody');
            const currentTableBody = document.querySelector('table tbody');

            if (currentTableBody && newTableBody) {
                currentTableBody.innerHTML = newTableBody.innerHTML; 
            }
            if(currentTableBody && !newTableBody){
                currentTableBody.innerHTML=null;
            }
            if(!currentTableBody && newTableBody){
               currentTableBody.innerHTML =  newTableBody.innerHTML;
            }

            var newPagination = doc.querySelector('nav[aria-label="Page navigation"]');
            var currentPagination = document.querySelector('nav[aria-label="Page navigation"]');

            if (currentPagination && newPagination) {
                 currentPagination.innerHTML = newPagination.innerHTML;
            }
            if(currentPagination && !newPagination){
                currentPagination.innerHTML=null;
            }
            if(!currentPagination && newPagination){
               currentPagination.innerHTML =  newPagination.innerHTML;
            }
            history.pushState(null, '', url);

        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }
    document.addEventListener('DOMContentLoaded', () => {
    });
    document.querySelector('form').addEventListener('submit', function(event) {
        event.preventDefault(); 
        fetchPageData(1); 
    });
    // document.getElementById('pageSize').addEventListener('change', function() {
    //     fetchPageData(1); 
    // });
</script>